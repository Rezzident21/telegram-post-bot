# -*- coding: utf-8 -*-
import telebot
import database
from config import bot_token, admin_id
from telebot import types
import re
import json
import secrets

db = database.DataBase()
bot = telebot.TeleBot(bot_token,parse_mode='Markdown')

import hashlib


@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞')
@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def start(message):
    print(message.chat.id)
    if not db.get_user(message.chat.id):
        return
    else:

        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('üåü –ò–∑–±—Ä–∞–Ω–Ω—ã–µ', 'üìÉ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç')
        if admin_id == message.chat.id:
            markup.row('üîê –î–æ–±–∞–≤–∏—Ç—å id')
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞' or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üîê –î–æ–±–∞–≤–∏—Ç—å id')
def add_telegram_id_info(message):
    if message.chat.id == admin_id:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('‚ùå –û—Ç–º–µ–Ω–∞')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–¥ —é–∑–µ—Ä–∞', reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: add_telegram_id(m))

    else:
        bot.send_message(message.chat.id, '–ü—Ä–∏–∑–æ–π—à–ª–∞ –æ—à–∏–±–∫–∞')


def add_telegram_id(message):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        start(message)
        return

    try:
        db.insert_telegram_id(message.text)
        bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω id - {} '.format(message.text))
        start(message)
    except:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–¥')
        bot.register_next_step_handler(message, lambda m: add_telegram_id(m))
        return
        
   bot.polling(none_stop=True)
     
